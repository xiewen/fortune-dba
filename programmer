模块原则：使用简洁的接口拼合简单的部件。
-- UNIX哲学基础第一条，《UNIX编程艺术》by ESR
%
清晰原则：清晰胜于技巧。
-- UNIX哲学基础第二条，《UNIX编程艺术》by ESR
%
组合原则：设计时考虑拼接组合。
-- UNIX哲学基础第三条，《UNIX编程艺术》by ESR
%
分离原则：策略同机制分离，接口同引擎分离。
-- UNIX哲学基础第四条，《UNIX编程艺术》by ESR
%
简洁原则：设计要简洁，复杂度能低则低。
-- UNIX哲学基础第五条，《UNIX编程艺术》by ESR
%
吝啬原则：除非别无他法，不要编写庞大的程序。
-- UNIX哲学基础第六条，《UNIX编程艺术》by ESR
%
透明性原则：设计要可见，以便审查和调试。
-- UNIX哲学基础第七条，《UNIX编程艺术》by ESR
%
健壮原则：健壮源于透明与简洁。
-- UNIX哲学基础第八条，《UNIX编程艺术》by ESR
%
表示原则：将知识叠入数据，以求逻辑质朴而健壮。
-- UNIX哲学基础第九条，《UNIX编程艺术》by ESR
%
通俗原则：接口设计应避免标新立异。
-- UNIX哲学基础第十条，《UNIX编程艺术》by ESR
%
缄默原则：如果一个程序没有什么好说的，那就保持沉默。
-- UNIX哲学基础第十一条，《UNIX编程艺术》by ESR
%
补救原则：出现异常时，马上退出并给出足量错误信息。
-- UNIX哲学基础第十二条，《UNIX编程艺术》by ESR
%
经济原则：宁花机器一分，不花程序员一秒。
-- UNIX哲学基础第十三条，《UNIX编程艺术》by ESR
%
生成原则：避免手工Hack，尽量编写程序去生成程序。
-- UNIX哲学基础第十四条，《UNIX编程艺术》by ESR
%
优化原则：雕琢前先得有原型，跑之前先学会走。
-- UNIX哲学基础第十五条，《UNIX编程艺术》by ESR
%
多样原则：绝不相信“不二法门”的断言。
-- UNIX哲学基础第十六条，《UNIX编程艺术》by ESR
%
扩展原则：设计着眼未来，未来总比预想快。
-- UNIX哲学基础第十七条，《UNIX编程艺术》by ESR
%
K.I.S.S -- Keep It Simple, Stupid!
-- UNIX哲学，《UNIX编程艺术》by ESR
%
不懂UNIX的人最终还要重复发明一个蹩脚的UNIX。
-- Usenet签名，1987年11月，Henry Spencer
%
忘记过去的人，注定要重蹈覆辙。
-- 《The Lift of Reason》, 1905 by George Santayana
%
如果你不知道如何表现地高人一等，找个Unix用户，让他做给你看。
-- Dilbert newsletter 3.0, 1994
%
彻头彻尾的反Unix系统，就是没有任何统一性理念，
胡乱堆砌起的一些唬人特性而已。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，就是绝无多任务处理能力 -- 或者通过对进程管理
增设诸多规定、限制和特殊情况来削弱多任务处理能力 -- 的一个废物。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，就是让进程的生成代价高昂，让进程的控制
困难而死板，让IPC可有可无，对它不予支持或支持很少。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，应用一套拙劣的记录结构，任何特定的工具能否像
文件编写者希望的那样读懂文件，完全是靠运气。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，让所有文件格式都采用不透明的二进制格式，
后者要用重量级的工具才能读取和编辑。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，就是没有CLI，没有脚本编程能力 -- 或者，
存在CLI不能驱动的重要功能。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，就是一个自认为比你自己更懂你在干什么的操作系统，
然后雪上加霜的是，它还做错了。
-- 《UNIX编程艺术》by ESR
%
彻头彻尾的反Unix系统，不可能进行轻松编程。
-- 《UNIX编程艺术》by ESR
%
软件设计有两种方式：一种是设计得极为简洁，没有看得到的缺陷；
另一种是设计得极为复杂，有缺陷也看不出来。第一种方式的难度要大得多。
-- The Emperor's Old Clothes, CACM February 1981
%
从好的符号体味出的巧妙和启发，就算身边的老师也不过如此。
-- The world of Mathematics (1956), Bertrand Russel
%
程序员束手无策...只有跳脱代码，直起腰，仔细思考数据才是最好的行动。
表达是编程的精髓。
-- The Mythical Man-Month, Anniversary Edition (1975-1995), pp. 103,
%
我们所有的知识都来源于我们的感知。
-- Leonardo Da Vinci
%
过早优化乃万恶之源。
-- C. A. R. Hoare
%
我语言的极限便是我世界的极限。
-- Tractatus Logico-Philosophicus 5.6, 1918
%
Unix是用户友好的 -- 只不过是挑剔的友好。
-- 佚名
%
软件和性一样，越自由越好。
-- Linus Torvalds
%
预测未来最好的方法就是去创造未来。
-- 1971年XEROX PARC会议，Alan Kay
%
我不害怕计算机，我害怕没有计算机。
–- 艾萨克.艾西莫夫（Isaac Asimov），科幻作家，机器人三定律提出者
%
下国际象棋计算机击败过我，可他们就是不给我来一场拳击比赛。
–- Emo Philips，娱乐明星，喜剧演员
%
计算机科学就是有关计算机的，正如天文学就是有关望远镜的。
–- 艾兹格·迪杰斯特拉（Edsger W. Dijkstra），荷兰计算机科学家，最短路径算法提出者
%
计算机天生就是用来解决以前没有过的问题的。
–- 比尔盖茨（Bill Gates）
%
软件就像熵：难以把握，没有重量，服从热力学第二定律；比如说，它总是在增长。
–- 诺曼·奥古斯丁（ Norman Augustine），洛克希德马丁公司前总裁
%
软件就是煤气；会扩张至充满整个容器。
–- 纳森·梅尔沃德（Nathan Myhrvold ），微软前CIO
%
所有部分都应当在非强制的情况下组合回一起。
要记住，你重组的那部分原来就是你拆解的。
因此，如果你不能让它们组合回来的话，那一定是有原因的。
要想尽一切办法，除了用锤头。
–- IBM手册, 1925
%
标准总是过时的，这让它们成为了标准。
–- 艾伦·班尼特（Alan Bennett），英国作家、编剧
%
物理是宇宙的操作系统。
–- Steven R Garman
%
硬件令机器变快。软件则把快机器搞慢。
–- Craig Bruce
%
想象力比知识重要。因为知识是有限的，而想象力概括着世界上的一切，推动着世界的进步，并且是知识进化的源泉。
–- 阿尔伯特·爱因斯坦（Albert Einstein）
%
知识最大的敌人不是无知，而是错觉。
–- 斯蒂文·霍金（Stephen Hawking）
%
知道得越多，越意识到自己无知
–- 苏格拉底（Socrates）
%
告诉我，我会忘掉。教导我，我会记住。让我参与，我会掌握。
–- 本杰明·富兰克林（Benjamin Franklin）
%
知之为知之，不知为不知，是知也.
–- 孔子
%
没干过蠢事的人，也永远不会有什么聪明之举。
–- 路德维希·维特根斯坦（Ludwig Wittgenstein），《逻辑哲学论》作者
%
从互联网获取信息就好比从消防龙头喝饮料。
–- 迈克尔·卡珀（Mitchell Kapor）
%
如果你以为用户是白痴，那就只有白痴才用它。
–- 李纳斯·托沃兹（Linus Torvalds），LINUX之父
%
从程序员的视角看，用户就是一外围设备，在提交读请求的时候敲东西。
–- P. Williams
%
’任意’键在哪里？
–- 霍默·辛普森（Homer Simpson），在回应请按“任意键”时
%
计算机擅长接受指令，不擅了解你的思想。
–- 高德纳（Donald Knuth）。现代计算机鼻祖，《计算机程序设计艺术》作者
%
常识只有一个问题；就是它不常见。
–- Milt Bryce，系统方法论之父
%
最不满意的客户是你最大的学习之源。
–- 比尔·盖茨（Bill Gates）
%
让我们改变一下对构建程序的态度：
不要把我们的主要工作想象为教计算机怎么做，
相反，让我们集中精力向人们解释我们想让机器做什么。
–- 高德纳（Donald Knuth）。现代计算机鼻祖，《计算机程序设计艺术》作者
%
互联网？我们没兴趣。
–- 比尔·盖茨（Bill Gates）， 1993
%
在Usenet上获得准确信息的最好办法是提交错误的东西然后等着更正。
–- Matthew Austern，深入C++系列、《泛型编程与STL》作者
%
大部分专家都同意，摧毁世界最有可能的方式是事故。
这正是我们的用武之地；我们是计算机专家，能引发事故。
–- 纳森尼尔·伯伦斯坦（Nathaniel Borenstein），MIME协议创造者
%
我们被告知，悲观主义，就是看到一个装有有50%的空气和50%的水的玻璃杯时把它看做有一半是空的。
乐观主义，相反，会把它看做有一半是满的。
当然，工程师则是这样理解的：玻璃杯比需要的尺寸大了一倍。
-– Bob Lewis
%
在充斥着顶级软件设计师的房子里，如果有两人同意一件事，那就是大多数了。
-– 比尔·柯蒂斯（Bill Curtis），个体CMM的主要架构师和作者
%
应该指出的是，任何一个受过职业道德训练的软件工程师都不会同意写一个摧毁巴格达的过程（DestroyBaghdad procedure）。
相反，基本的职业道德要求他先写一个摧毁城市的过程（DestroyCity procedure），而“巴格达”则可以作为一个参数。
-– 纳森尼尔·伯伦斯坦（Nathaniel Borenstein），MIME协议创造者
%
大部分情况下，你看到程序员的时候他们都是无所事事的。
有关程序员，其中一件吸引人的事就是光靠看你是无法确定他们是否在干活的。
他们常常似乎是在喝喝咖啡、扯扯闲话，或者盯着空白处发呆。
而实际上程序员此时在干的，却是试图去理解所有从自己脑海里蹦出来的互不相关的想法。
-– Charles M. Strauss
%
如果你认为你的价值在于自己所知道的多少，你就大错特错了。
要不了多少年，你今天的知识就没什么价值了。
你的价值体现在你能学多少，以及你对这个职业常常带来的改变的适应程度。
–- Jose M. Aguilar
%
程序是写来给人读的，只会偶尔让机器执行一下。
–- Abelson and Sussman
%
给代码注释就像是给浴室做清洁一样
你永远都不想干，但它的确给你和客人带来了更愉快的体验。
–- Ryan Campbell
%
我们必须停止为程序员进行优化，并开始为用户进行优化。
–- Jeff Atwood，Coding Horror网站创建者
%
低水平的编程有益于程序员的灵魂。
–- 约翰·卡马克（John Carmack），第一人称射击游戏之父
%
弄清楚谋杀之谜可以，但你不该去弄清楚代码。你该会读。
–- 史蒂夫·迈克康奈尔（Steve McConnell），《代码大全》作者
%
如果想要计算代码行数的话，我们不该将其视为‘产生了多少行’，而应看作是‘花费了多少行’。
-– 艾兹格·迪杰斯特拉（Edsger W. Dijkstra），荷兰计算机科学家，最短路径算法提出者
%
编程可以是有趣的，解密亦然；不过这两者不该结合在一起。
-– Kreitzberg和Shneiderman
%
软件可重用之前应该可用在先。
-– Ralph Johnson，《设计模式》一书的联合作者
%
如果对一团糟自动化，你将自动得到一团糟。
-– Rod Michael
%
看自己超过两周之前写的代码就跟之前没看过一样。
-– Dan Hurvitz，《ASP.NET编程》作者
%
让规范适应程序要比让程序适应规范容易。
-– Alan Perlis，1966年第一位图灵奖得主，在高级编程技术及其编译器构造领域的影响巨大
%
需要实现系统表面目的的代码不超过10%；剩下的都是干些输入输出、数据校验、数据结构维护以及其他一些家务活。
-– Mary Shaw，《软件工程 -- 实践者的研究方法》作者
%
如果说你的过程有十个参数的话，你可能漏掉一些了。
-– Alan Perlis，1966年第一位图灵奖得主，在高级编程技术及其编译器构造领域的影响巨大
%
维护别人的代码就像是进入一栋设计得很漂亮的建筑，你一边逛一边景仰着，并盘算着加个侧厅或者重新装修一下什么的。
不过这种情况太罕见了，更常见的是感觉是像被倒栽葱地一把扔进了又脏又臭的垃圾堆里。
-– 比尔·文纳斯（Bill Venners），《Programming in Scala》联合作者
%
代码生成就跟喝酒精一个样，适度就好。
-- Alex Lowe
%
简单之至则为雅致。
-- Jon Franklin
%
一个程序的完成程度，永远不会低于90%，也永远不会高于95%。
-- Terry Baker
%
开保时捷却陷入交通堵塞的时候，你能做的只有干轰掉更多的油。可伸缩性就是造更宽的马路，而非更快的车。
-- Steve Swartz
%
现在大概人人都知道过早优化（premature optimization）的危险了。
我认为我们就应该像担忧过早优化那样担忧过早设计（premature design） -- 对程序该干什么设计得过早。
-- Paul Graham，计算机博士，风险投资家
%
没考虑好整体结构或设计的编程就像是仅持手电筒进行洞穴探秘：
不知道自己去过哪里，要去哪里，也不知道自己正身处何处。
-- 丹尼·索普（Danny Thorpe），Delphi架构师
%
预测未来最好的方式是实现它。
-- David Heinemeier Hansson，ruby on rails的创始人
%
我们首先要了解变化；没人想、也不需要每天16个小时来提醒他鞋子还在穿着呢。
-- David Hubel，诺贝尔生理学或医学奖得主，在大脑视觉信息加工研究领域作出重要贡献
%
我曾两次被问到过，‘如果你给机器输入了错误的数字，能不能还得出正确的答案？’。
对于产生了那么一个问题的此类令人困惑的想法，我不能马上理解清楚。
-- 查尔斯·巴贝奇（Charles Babbage），计算机概念第一奠基人
%
让一切尽可能简单，但不要更简单。
-- 爱因斯坦（Albert Einstein）
%
现有的大多数软件其作用并非解决问题而是与别的软件交互。
-- IO Angell
%
好的规范总能够比任何编程工具或技术更好地改进程序员的生产力。
-- Milt Bryce，系统方法论之父
%
理论和实践的区别在于在理论上实践和理论是没有区别的。
-- Richard Moore
%
不要记录问题，要解决问题。
-- Atli Björgvin Oddsson
%
作为定律，软件系统在使用之前都不会运行得好，并在实际应用中错误不断。
-- Dave Parnas，软件工程先驱
%
如果代码和注释未能匹配，那么有可能都是错的。
-- Norm Schryer
%
我认为这是一项新功能。别告诉任何人这是个事故。
-- 拉里·沃尔（Larry Wall）。Perl教父
%
如果你不处理（例外）的话，我们就关掉你的程序。这将极大地提高系统的可靠性。
-- Anders Hejlsberg，Delphi和C#之父
%
调试时，新人插入纠正代码，专家移除问题代码。
-- Richard Pattis
%
在一个有10个人的软件项目团队里，也许3个人生产出来的不合格品就足以让他们成为净产出为负的生产者。
-- Gordon Schulmeyer，《软件质量保证》作者
%
我认为大家程序写的不好是不可避免的。培训大体上于事无补。我们得学会适应它。
-- Alan Perlis，1966年第一位图灵奖得主，在高级编程技术及其编译器构造领域的影响巨大
%
程序测试是展现BUG存在的有效方式，但令人绝望的是它不足以展现其缺位。
-- 艾兹格·迪杰斯特拉（Edsger W. Dijkstra），荷兰计算机科学家，最短路径算法提出者
%
人工管理C语言的内存块就像是在监狱浴室里玩肥皂抛接：像玩游戏一样有趣，直到你忘掉其中一个*。
-- 匿名Usenet用户
译注：有趣或者游戏，忘掉有趣你就会感到内存管理索然无味，
光顾有趣忘掉游戏（有成功或失败的结果）就很可能导致内存溢出的灾难。
%
不会有令人糊涂的Per争执，因为它是无指针的。
-- Jeff Polk
%
自MS-DOS以来，Java是对计算业打击最为沉痛的东西。
-- 阿伦·凯（Alan Kay ），GUI、smalltalk之父
%
C++只有两件事情是错误的：那就是初步概念以及实现。
-- Bertrand Meyer，《Object Oriented Software Construction》作者
%
那是个玩笑，好不好？如果我们知道这会被实际用到，我们就不会写它了！
-- Mark Andreesen，在谈到HTML的标签BLINK时
%
web服务就像少男少女的性（teenage sex）。每个人都在谈怎么去做，而真正做的那些人却做得很糟糕。
-- Michelle Bustamante
%
Perl：唯一一种经过RSA加密后看上去仍保持一致的语言。
-- Keith Bostic
译注：调侃Perl难懂
%
我并没有努力让Ruby对人人都是完美的，因为你我的感觉是不同。
没有对每个人都是尽善尽美的语言。
我努力让Ruby于我是完美的，但于你而言，未必。
对于Guido van Rossum来说，完美语言可能是Python。
-- Yukihiro Matsumoto，又称 “Matz”， Ruby创造者
%
如果XML是编程语言的话，那在餐布上涂涂划划也是语言。
-- 查尔斯·西蒙尼（Charles Simonyi），“所见即所得”、“匈牙利表示法”发明人，微软智囊核心，登上太空的富豪
%
BASIC之于计算机编程正如QWERTY之于打字。
-- 西蒙·派珀（Seymour Papert），人工智能先驱
%
据发现C++提供了一个非同凡响的功能来隐藏程序的琐碎细节 -- 比如bug在哪里。
-- David Keppel
%
UNIX是简单的。只不过它需要天才去理解其简朴。
-- 丹尼斯·利奇（Dennis Ritchie），Unix之父、C语言的发明人，1983年图灵奖得主
%
有的人，在遇到一个问题的时候会认为‘我知道，我会使用正则表达式。’ 现在他们遇到两个问题了。
-- Jamie Zawinski，Mozilla主要贡献者
%
我认为计算机病毒应该当作生命。它道出了人性的某些方面：
那就是，迄今为止我们所创造出的生命的唯一的形式纯粹是破坏性的。
我们照自己的形象创造生命。
-- 斯蒂芬•霍金（Stephen Hawking）
%
唯一真正安全的系统是断电后被浇铸进水泥块中并被封存进防辐射的有重兵把守的屋子内的系统。
-- Gene Spafford，最先分析最早蠕虫病毒的人
%
突破安全并不能让你成为黑客，正如用电线点火偷车并不能让你成为汽车工程师。
-- 埃里克·雷蒙（Eric Raymond），开源斗士，著名黑客
%
公司花费了数百万美元到防火墙、加密及安全访问设备上面，
他们的钱打水漂了，因为这些无一触及安全链中最薄弱的环节。
-- Kevin Mitnick，著名黑客
%
如果你认为技术能解决安全问题，那么你既不理解问题也没理解技术。
-- 布鲁斯·施奈尔（Bruce Schneier ），安全专家，Blowfish 和 Twofish 加密算法发明人
%
恶作剧利用人类行为的弱点来保证自己得以复制和传播。换句话说，恶作剧攻击的是人类操作系统。
-- Stewart Kirkpatrick
%
密码就像内衣：你不会让人看见，得常换，还有，你不该与陌生人分享。
-- Chris Pirillo
%
我不是成心要致微软于死地，那完全是意想不到的副作用。
-- 李纳斯•托瓦兹（Linus Torvalds），LINUX之父
%
是的，我们有着装要求。你得穿衣服。
-- 斯科特·麦克利尼（Scott McNealy），SUN联合创始人
译注：SUN以随和的硅谷风格著称，与IBM形成鲜明对比。
%
在信息经济里，最有价值的公司资产每天晚上都会自己驱车回家。如果未获善待，第二天早上他们就不会回来了。
-- Peter Chang
%
等一个有生产力的程序员出现要比等第一个程序员变得有生产力好。
-- Steve McConnell
%
我不是认为比尔盖茨是恶魔者之一。我只是在揣测，如果微软遇见了魔鬼，它会需要一名翻译（interpreter，双关）。
-- Nicholas Petreley
%
从现在算起，垃圾邮件有望在两年内得到解决。
-- 比尔·盖茨（Bill Gates）, 2004
%
病毒的问题只是暂时的，将于2年内得到解决。
-- John McAfee, 1988
%
计算机病毒只是个传说。
-- Peter Norton, 1988
%
到2031年，律师将会成为多数开发团队的普通一员。
-- Grady Booch，UML创始人之一
%
我不知道2000年的语言长什么样，但我知道它叫Fortran。
-- CA Hoare, 1982
%
将来，计算机重量也许不超过1.5吨。
-- 《大众机械》, 1949
%
起码在十年之内我看不到互联网任何的商业潜力。
-- 比尔·盖茨（Bill Gates）, 1994
%
在人类抵达月球之前，邮件就能在数小时之内从纽约投递到加利福尼亚、英国、印度或澳大利亚。
-- Arthur Summerfield, 1959, 美国邮政局
%
如果你想动手开发什么全新技术，你不需要几百万美元的资金，
你只需要在冰箱里面放满比萨和可乐，再有一台便宜的计算机，和为之献身的决心。
--卡马克
%
程序员有三种美德:懒惰,急躁和傲慢...
懒惰：
是这样一种品质，它使得你花大力气去避免消耗过多的精力。
它敦促你写出节省体力的程序，同时别人也能利用它们。
为此你会写出完善的文档，以免别人问你太多问题。
急躁：
是这样一种愤怒 -- 当你发现计算机懒洋洋地不给出结果。
于是你写出更优秀的代码，能尽快真正的解决问题。
至少看上去是这样。
傲慢：
极度的自信，使你有信心写出（或维护）别人挑不出毛病的程序。 
-- perl的发明人Larry Wall在其著作《Perl编程》第二版添加具有幽默意味的名言
%
没有银弹
-- 《人月神话》
%
[程序出错后，程序员给测试人员的20条高频回复](http://blog.jobbole.com/606/)
20. "That’s weird…" 很奇怪……
19. "It’s never done that before." 以前没这样过的。
18. "It worked yesterday." 昨天还好好的。
17. "How is that possible?" 那怎么可能？（怎么会出问题？）
16. "It must be a hardware problem." 这一定是硬件问题。
15. "What did you type in wrong to get it to crash?" 你输入什么东西后才崩溃的？
14. "There is something funky in your data." 你的数据有问题。
13. "I haven’t touched that module in weeks!" 我好几个礼拜没动那个程序了！
12. "You must have the wrong version." 你一定在用错误的版本。
11. "It’s just some unlucky coincidence." 这只是凑巧。
10. "I can’t test everything!" 我无法测试所有东西。（我的机器环境下，无法测试所有的可能情况。）
09. "THIS can’t be the source of THAT." “这”不可能是问题的原因。
08. "It works, but it hasn’t been tested." 程序能用，不过还没有测试。
07. "Somebody must have changed my code." 一定有人改了我的代码。
06. "Did you check for a virus on your system?" 你的电脑扫描病毒了么？
05. "Even though it doesn’t work, how does it feel? 即便程序不行了，（你觉得）程序写得如何？
04. "You can’t use that version on your system." 你不能在你系统上使用那个版本的程序。（程序版本和系统有冲突。）
03. "Why do you want to do it that way?" 你怎么会想着那样操作啊？
02. "Where were you when the program blew up?" 程序崩溃时，你在做什么呢？（做了哪些操作？）
第1条会是什么？猜猜看吧！
01. "It works on my machine" 在我机器上好好的！！！（潜台词：怎么在你那就出问题了呢！！！）
%
[程序员常说的11句话](http://blog.jobbole.com/959/)
9. No, I don’t know how to fix the microwave. 不，我不会修微波炉。
由于某些原因，非专业人士认为所有带按钮的东西，都可以让程序员来修理。
如果你不想再有这样的“烦恼”，这里有《不当免费技术支持的10种方法》，可以帮你委婉拒绝！
8. My code is compiling… 我的代码还在编译……
code is Compiling
7. That code is crap. 那（这）代码好烂！
除了我的代码之外，其他人的代码都一团糟。
6. It’s not a bug, it’s a feature. 这不是Bug，而是特性。
-- 一天重启两次？我敢保证，这会把临时文件删掉的。
bug vs feature
5. Why? 为什么？
为什么我们总是问为什么？
4. Have you tried turning it off and on again? 你试过重启了吗？
电视剧《IT狂人 /The IT Crowd》已经让这句话更加流行了……
3. It will be ready tomorrow. 明天就能搞定。
这句话的问题在于我们明天、后天、大后天……还是这样说……
2. D’oh! 噢！
-- 嗨，荷马，你有没有把调试代码从正式版本中删除？
“D’oh!”是动画片辛普森一家中虚构人物荷马·辛普森的口头禅。
通常在荷马走霉运、受伤的时候会不由自主的说“D’oh!”。
1. “It works on my machine！” 在我机器上好好的！！！
这句不陌生吧，这在《程序员给测试人员的20条高频回复》就排第一了。
当我们在抱怨一些错误时，都已经习惯这样表示了。
0. WTF! 见鬼了！
程序员/开发人员在检视代码时，这是重复得最多的一句话……
wtf
补充1个国内的：
-1. 又加班啊！！！
%
程序员见禅师：我学了 hello world 和水仙花数，想自己开发个操作系统，希望大师指点。
禅师笑而不语，抓来一只鸡，在鸡腿上缠根线，他一拉线，鸡立即跌倒，鸡挣扎起来继续走，禅师又一拉，鸡又跌倒，如此反复八次之多。
程序员若有所悟：“大师您是让百折不挠，再接再厉？”
禅师一笑：“小伙子，我是让你拉鸡八倒。”
-- [据说，年薪百万的程序员，都是这么开悟的（一）](http://justjavac.com/other/2013/12/18/nianxinbaiwan-de-chengxuyuan-doushi-zheme-kaiwude-1.html)
%
程序员问禅师：我总是和我的同事们合不来，他们使用 Java，我使用 PHP。
禅师笑而不语，拿出一根筷子，递给青年：来，折断它。
青年接过筷子，很轻松地就折断了。
禅师又拿出四十七根筷子，青年抢过来，抄出把斧头全砍断了。
禅师沉吟片刻，摆出架式，双手合十：你们应该使用 Python 语言。
%
程序员对禅师说：“禅师，有些东西我放不下。”
禅师说：“没有什么东西是放不下的。”
程序员摇了摇头，打开电脑。
禅师说：“还是买个大点儿的硬盘吧。”
%
一程序员请教禅师：我最喜欢 java 语言，但是别人总说 java 不好，java 将死，我该如何？
禅师拿起一把斧子抛向天空，然后问：听到天空喊疼的声音了吗？
该程序员摇头：斧子又没伤到天空，天空怎么会喊疼呢？
禅师点头：天空那么高远辽阔，何事不能容。做名合格程序员，要像天空一样。斧子扔得再… 啊呀我操…
%
程序员去拜访禅师：每次遇到程序 bug，我都心急如焚，特向大师求心灵平静之道。
禅师一言不发，先去劈柴，然后打水，把柴放入灶中点燃，用大壶烧水，细细地一个个擦拭茶杯。
程序员恍然大悟：“您的意思是，要善于从生活的细处去体验人生！”
禅师放下手里的活计，淡然道：“我这刚上班，正忙着呢，别他妈烦我！！”
%
程序员问禅师：“我想开发一个网站，其中包罗万象，汇集人人、QQ、facebook、淘宝的所有特长，大师觉得如何？”
禅师一言不发带他来到院子里，几棵梅树正默默地吐露着芬芳。
“梅花香自苦寒来...”
程序员很受感动：“大师！您是想告诉我只要不断努力就能得偿所愿吗？”
禅师摇了摇头：“梅前你说个屁。”
%
[据说，年薪百万的程序员，都是这么开悟的（二）](http://justjavac.com/other/2013/12/18/nianxinbaiwan-de-chengxuyuan-doushi-zheme-kaiwude-2.html)
0 分手篇
程序员问禅师：“我和在一起 7 年的女友分手了，程序员是否诸多和爱情无缘？”
禅师笑而不语，把程序员带到正在比赛的球场。
程序员大悟：“大师的意思是否是说：爱情的意义就像一场比赛，只要过程努力过，结果如何并不重要？”
大师闭上眼睛道：“你分手关我球事？”
%
1 相貌篇
程序员问禅师：“我天天对着电脑，熬夜到凌晨。大家都说我丑，我真的很丑吗？”
禅师笑而不语，端起一杯水，浇到程序员脑袋上。
程序员不解：“你的意思是，我每天都洗头就不那么丑了？”
禅师回答说：“丑到端水水更流，举杯浇丑丑更丑。”（抽刀断水水更流，举杯浇愁愁更愁 -- 李白）
%
2 财富篇
程序员问禅师：“大师，我天天加班，独立完成了一个大项目，我现在很富有，但是我却一点也不快乐，您能指点我该怎么做吗？”
禅师问道：“何谓富有？”
程序员回道：“银行卡里 8 位数，五道口有 3 套房不算富有吗？”
禅师没说话，只伸出右手，青年恍然大悟：“禅师是让我懂得感恩与回报？”
“不，-- 土豪，我们可以做朋友吗？”
%
3 单身女程序员篇
女程序员问禅师：“为什么我年轻漂亮，楚楚动人，可没有男人喜欢我？因为我是一名女程序员吗？”
禅师问：“你知道男人为什么喜欢大海，而不喜欢湖吗？”
女程序员想了想：“我知道了，因为大海挑战大，男人都喜欢挑战，所以喜欢大海，对吗？”
禅师：“挑战个屁啊，因为大海波大！”
%
4 单身男程序员篇
程序员问禅师：“我一直追不到我心仪的女孩，我该怎么办才好？因为我是一名程序员吗？”
禅师笑而不语，指了指旁边树杆上正在艰难爬行的蜗牛。
程序员顿悟道：“禅师，您是说只要像这蜗牛一样坚持不懈，总会成功是么？ ”
禅师抡起木鱼狠砸：“傻X，你得像它一样先有套像样的房子!”
%
5 资金篇
程序员问禅师：“我有很大的梦想，如果实现了，这个世界将再也没有纷争。因此我需要很多钱，大师您能帮我吗？”
禅师拿出一个小孩的帽子和一双小孩的手套让青年穿上，然后问：”你有什么感觉？”
“手，头有点紧。”
“我也是。”
%
6 休息篇
程序员半夜睡不着，于是问禅师：“大师我经常失眠，应该怎么办呢？”
禅师笑而不语，手指指向禅房的墙壁。
程序员循指望去，一面白墙映入眼帘，墙体空白一片别无它物。程序员沉思良久后恍然大悟：“大师是说要摒弃心中杂念，心无所想才能入睡？”
禅师摇摇头，大怒：“我意思是TM给我滚！都凌晨一点了还让不让人睡啊！”
%
7 生活篇
程序员问老禅师：“我是一名苦B程序员，活得没有一点安全感，该怎么办呢？”
禅师笑而不语，用手指了指自己的胸口。
程序员恍然大悟：“我明白了。只有像您这样心无所系，才能无忧无虑，对吗？”
“不” 老禅师缓缓的从胸口掏出一个小本本，上面写着：“The Secretary of State of the United States of America hereby requests ……”
%
8 感情篇
程序员问禅师：“大师，我收入不高，没有对象。因此心情烦躁，静不下来，我觉得心堵很痛苦。”
禅师笑笑抬手向南方一指，悠悠说道：“去看看大海吧。”
程序员若有所思的问：“这是要我陶冶情操，感受海的博大胸怀吗？”
禅师摇摇头：“如果大海能够，带走你的矮丑。”
%
记者问一位大爷说：老大爷，您保持年轻的秘诀是什么？ 
大爷说：白天上班，夜晚加班，节假日值班，一天五包烟，天天吃泡面。
记者问：老大爷，您是干什么工作的？
大爷说：我是程序员！
记者：啊？？大爷您今年高寿？ 
大爷：老子今年35！
%
一位女士走到一个在正在路边抽烟的男子身旁说：嘿！总是抽烟会害了你的！你没有阅读烟盒上的警告吗？！
男子：我不是很care，因为我是一名程序员。
女士：所以呢？
男子：听好了，我们程序员是一点都不担心警告(warning)的，我们只担心错误(error)。
%
Q：需要几个优秀的程序员才能修灯泡呢？
A：一个也不需要，因为这是一个硬件问题，叫来再多的程序员也无济于事。
%
如果你把1000只猴子分别放在1000个键盘上，其中的一个猴子是真的可以写出来一个Java程序的。
但在那之前，其余的猴子会先写出Perl程序。
%
如何抓住一头狮子

程序员的方式：
尝试用笼子和像羊肉这样的诱饵抓住它。
如果一开始狮子没有被抓住的话，就改变笼子的架构，
如果狮子还是没有被抓住，就把诱饵换成鹿肉。
这样不断地细微调整这两种条件直到抓到狮子。

团队领导的方式：
让最好的猎人来抓这个狮子，同时与马戏团主管交流，
以确保狮子在被抓住的同时，实际项目不会有任何改变。

经理的方式：
不断的举行会议，催促猎人抓住这只狮子，
如果猎人拒绝，就发一些含有类似“你完蛋了”这种词汇的邮件，
让猎人意识到与其回复邮件，不如花更多的时间和精力把狮子找到。
当猎人抓到狮子时，经理会用虚假的评价表扬他们；
而当要付给猎人工资时，经理就会说他其实想要的是一头老虎，
然后告诉你，你的表现并没有你想的那么好，
因此他们也不能按照你的预期付给你工资。

L2支持团队成员的方式：
首先阅读一本关于如何抓狮子的书。
接着按照书上写的一步步缓缓进行（并且他们十分害怕出错），
狮子太无聊也太沮丧了就投降了，也没有再提任何要求。

人力资源经理的方式：
不管什么时候，只要狮子越出了它的领地，人力资源经理就会立刻给它发丛林政策的PDF文件和链接，
并告诉它，如果不遵守的话，会有严重后果。
即使狮子遵守了丛林法则，他们也会不断地发政策的更新信息和丛林的行为准则给狮子，
狮子被折腾的不耐烦以至于觉得比起遵守outlook中的那些规则还不如自杀。
%
“哪一种面向对象方式可以使你一夜暴富？ ”
“继承 !!”
%
软件就像sex一样， 它永远不会真的免费。
%
程序员为什么喜欢UNIX呢？
以下是一些可以在Unix上使用的指令：
Unzip （拉开拉链）,
strip（脱去）,
touch（触碰）,
finger（用指抚摸）,
grep（探索）,
mount（登上）,
fsck（…）,
more（再来一点）,
yes（妙极了）,
fsck（…）,
umount（登出）,
sleep（睡觉）
%
程序员房间的布告板
1. Home(回家)
2. Sweet(甜蜜)
3. Go to 1(转到1）
%
有一个程序员对自己的工作感到厌倦了，于是去面试了人力资源经理的工作。
面试官：想象一下你在一幢七层楼高的大楼里，楼里着火了，你怎样才能逃脱呢？
程序员：这很简单啊，我会立刻停止想象！！！
%
程序员最讨厌的两件事情：写文档和别人不写文档。
%
IT面试必过经验：穿得不修边幅一点，头发蓬乱一点，眼圈描黑一点，神情装得憔悴一点，至少看上去要像个程序员。
%
一个姑娘在我女友面前声讨她的男友，女友帮腔说：学土木工程的嘛，肯定又土又木。姑娘问：那你男友学什么的？答：软件工程。
%
女朋友发了一条状态：如果你的男友最近没和你联系，要理解！
只有三种可能：第一、他死了；第二、他改行当程序猿了；第三、改需求了！
%
什么是职业病？挨踢民工的职业病就是，如果有一天5点就下班，你会无比内疚；
如果连续两天5点下班，你会无比自责；
如果连续三天5点下班，你会严重怀疑公司是不是准备把你给炒了。
%
某程序员退休后决定练习书法，于是重金购买文房四宝。
一日，饭后突生雅兴，一番研墨拟纸，并点上上好檀香。
定神片刻，泼墨挥毫，郑重地写下一行字：hello world！
%
Q：你知道为什么在用某种绝世神功之前要大声喊出来么？
A：因为函数在调用之前要先声明。
%
有个家伙坐热气球，发现自己迷失了方向。他降低高度，看到了地面上有个人。
他冲这个人喊道：“你好，你知道我在哪儿吗？”
那个人回答：“你在热气球里，离地三十多米！”
坐气球的家伙：“你肯定是IT人士！”
地上的人：“是啊，你怎么知道？”
“因为你说的全都是正确而没用的废话！”
地上的人：“噢？我知道你一定是产品经理了！”
气球上的人这下惊讶了：“是啊，你又怎么知道的？”
“是这样。”地上的人回答：“你不知道自己在哪儿，也不知道自己要去哪儿，就指望我解决你的要求。你从头到尾都没动，现在变成我的错了！”
%
当你有个锤子的时候，任何东西看起来都像钉子。当你的锤子是C++的时候，任何东西看起来都像大拇指。
%
C++其实和青少年性爱一样
每个人都在想它。
每个人都在谈论它。
每个人都认为别人都在做它。
其实只有非常非常非常少的人做。
真正做了的人：A：做的很糟。B：当然每次都有进步。C：总是做的不安全。
%
当你聚集无数只猴子在一个电脑前胡乱拍打的时候，总会有一只猴子敲出JAVA程序来的。
其他的猴子敲出来的都是Perl程序。
%
问：多少程序员可以换一个灯泡？
答：0。这是一个硬件问题。
%
问：多少prolog程序员可以换一个灯泡？
答：Yes
%
用代码行数来衡量程序的开发进度，就好比用重量来衡量飞机的制造进度。
-- 比尔·盖茨
%
我不是一个优秀的程序员，我只是一个有着优秀习惯的普通程序员。
-- 敏捷大师 Kent Beck
%
有的时候宁愿付钱让你周一在床上待着，也不想让你用这周剩下的时间去调试你在周一所写的代码。
-- 丹·所罗门
%
Talk is cheap, show me the code。
-- Linus之父
%
如果没能一次成功，那就叫它1.0版吧。
%
编程时要保持这种心态：就好象将来要维护你这些代码的人是一位残暴的精神病患者，而且他知道你住在哪。
-- MartinGolding
%
编程就像性一样:一时犯错,终生维护。
-- Michael Sinz
%
格林斯潘第十定律:
任何C或Fortran程序复杂到一定程度之后，都会包含一个临时开发的、不合规范的、充满程序错误的、运行速度很慢的、只有一半功能的Common Lisp实现。
%
线程是为不懂状态机的程序员准备的。（艾伦·考克斯 -- linux二号人物）
A Computer is a state machine. 
Threads are for people who can't program state machines.
-- Alan Cox
%
摩尔定律：（貌似2015年后要过时了）
微处理器的性能每隔18个月提高一倍，或价格下降一半。
%
Brooks法则：（人月神话）
向进度落后的项目中增加人手，只会使进度更加落后。
（10个人10个月能完成的项目，并不意味着100个人能在1个月内完成。因为交流成本过高。）
%
忙碌与多产：（代码大全2 33.7）
人们容易混淆行动与进展，混淆忙碌与多产。有效编程中最重要的工作是思考，而人思考时通常不会看上去很忙。
%
1. Stay hungry, stay foolish.
乔帮主在2005年给斯坦福大学做毕业演讲中提到过的他最喜欢的一句话。
原文来自《Whole Earth Catalog》
%
2. You build it, you run it.
Amazon 的 CTO：Werner Vogels 的名言。
是相对传统应用开发模式提出来的，在微服务架构里头特别受欢迎。

传统的单体应用是基于项目模式的，且多数的项目都采用瀑布模型进行开发，
开发团队根据客户的业务需求及功能设计，开发出软件系统并交付给客户，
自此，该系统将由运维团队接手，进入系统运维阶段。

而在微服务架构体系中，更倾向于让开发团队负责应用系统的全部生命周期，
应用系统的开发是基于快速迭代方式来实现的，这是一个地地道道的产品研发思路，
让服务的开发者与服务的使用者（客户）形成每日的交流反馈，
来自直接客户的反馈有助于开发者提升服务的品质。
%
3. Talk is cheap. Show me the code.
Linux 的创始人 Linus Torvalds 在 2000-08-25 给linux-kernel 邮件列表的一封邮件提到的：
Talk is cheap. Show me the code.能说算不上什么，有本事就把你的代码给我看看。
%
4. Go big or go home.
Facebook 的办公室标语：
Go big or go home.要么牛逼，要么滚蛋。
%
5. Done is better than perfect.
Facebook 的标语：
Done is better than perfect.完成比完美更好。
%
6. Eat our own dog food.

据说，在狗粮生产基地，新配制出的狗粮都是要经过好多人品尝并通过后才会上市的。

而在IT界，微软公司也采用这一做法来检测他们自己研发的软件，
他们管这叫做 eat our own dog food。Dog food 指软件公司开发出新的软件程序后，
在发布之前先在公司内部使用，即“内部试用”，或者做名词指“内部试用的软件”。

微软公司让“吃我们自己的狗食”这句话变得人尽皆知，
这句话的意思是：每天研发工作的一部分就是使用自己正在开发的软件。
这种做法传达的理念是，研发人员在使用自己的软件时能够很快发现漏洞或者不对的地方。
%
用代码行数来评估程序的开发进度，就好比是拿重量来评估一个飞机的建造进度。
-- 比尔盖茨，前微软总裁
%
高质量的代码就是对程序本身最好的注释。当你打算要添加注释时，
问问自己：“我如何能改进编码以至于根本不需要添加注释？”
改进你的代码，然后才是用注释使它更清楚。
-- SteveMcConnell, 软件工程师，作家
%
一个好的程序员应该是那种过单行线都要往两边看的人。
-- Doug Linder, 系统管理员
%
任何一个工具，它的一个最重要的、同时也是最难以做到的方面就是对那些学习使用这个工具的人在使用习惯上的影响。
如果这个工具是一种编程语言，那么，这种影响 -- 不管我们是否喜欢 -- 将是一种思考习惯上的影响。
-- Edsger Dijkstra, 计算机科学家
%
抽象化是一种非常的不同于模糊化的东西 … 抽象的目的并不是为了模糊，而是为了创造出一种能让我们做到百分百精确的新语义。
-- Edsger Dijkstra
%
除数学外，对本土语言的异常的精通会是一个计算机程序员的最宝贵的财富。
-- Edsger Dijkstra
%
C语言很容易让你犯错误；C++看起来好一些，但当你用它时，你会发现会死的更惨。
-- Bjarne Stroustrup,C++语言的创始人
%
过去的代码都是未经测试的代码
-- Michael Feathers
%
任何傻瓜都能写出计算机可以理解的代码。好的程序员能写出人能读懂的代码
-- Martin Fowler
%
简单不先于复杂，而是在复杂之后
-- Alan Perlis
%
生命太短暂，不要去做一些根本没有人想要的东西。
-- Ash Maurya
%
如果你交给某人一个程序，你将折磨他一整天；
如果你教某人如何编写程序，你将折磨他一辈子。
-- David Leinweber
%
软件设计有两种方式：
一种方式是，使软件过于简单，明显没有缺陷；
另一种方式是，使软件过于复杂，没有明显的缺陷。
-- C.A.R. Hoare
%
其实，我尝试着使 Ruby 更自然，而不是简单。
Ruby 看起来很简单，但内部是非常复杂的，就像我们的身体一样。
-- 松本行弘，Ruby 之父
%
大部分情况下，构建程序的过程本质上是对规范调试的过程。
-- Fred Brooks，《人月神话》作者
%
软件开发往往是这样：
最开始的 90% 代码占用了开始的 90% 的开发时间；
剩下 10% 代码同样需要 90% 的开发时间。
-- Tom Cargill
%
当你试图解决一个你不理解的问题时，复杂化就产成了。
-- Andy Boothe
%
用几个小时来制定计划，可以节省几周的编程时间。
-- 匿名
%
控制复杂性是计算机编程的本质。
-- Brian Kernighan
%
计算机科学领域的所有问题都可以通过其他方式间接解决。
-- David Wheeler
%
编程是两队人马在竞争：
软件工程师努力设计出最大最好的连白痴都会使用的程序；
而宇宙在拼命制造最大最好的白痴。
到目前为止，宇宙是胜利者。
-- Rick Cook
%
调试一个初次见到的代码比重写代码要困难两倍。
因此，按照定义，如果你写代码非常巧妙，那么没有人足够聪明来调试它。
-- Brian W. Kernighan
%
我不是一个伟大的程序员，我只是一个具有良好习惯的优秀程序员。
―- Kent Beck
%
你们中大多数人都熟悉程序员的美德，有三种：那就是懒惰、急躁和傲慢。
–- Larry Wall，Perl 語言发明人
%
任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。
-- Martin Fowler
%
靠代码行数来衡量开发进度，就像是凭重量来衡量飞机制造的进度。
-- 比尔·盖茨
%
这不是一个 bug，这只是一个未列出来的特性。
-- 匿名
%
作为一个程序员，郁闷的事情是，面对一个代码块，却不敢去修改。
更糟糕的是，这个代码块还是自己写的。
-- Peyton Jones
%
它在我的机器上可以很好运行！
-- 大部分程序员
%
能说算不上什么，有本事就把你的代码给我看看。
-- Linus Torvalds，Linux 之父
%
我认为对象就像是生物学里的细胞，或者网络中的一台计算机，只能够通过消息来通信
-- Alan Kay，Smalltalk 的发明人，面向对象之父
%
当你选择了一种语言，意味着你还选择了一组技术、一个社区。
-- Joshua Bloch
%
质量、速度、廉价，选择其中两个。
-- 匿名
%
过早的优化是罪恶之源。
-- Donald Knuth
%
没有什么代码的执行速度比空代码更快。
-- Merb 核心原则
%
如果你是房间里最聪明的人，那么你走错房间了。
-- 匿名
%
如果只需更改一个单一的代码行，你的部门需要花费多长时间？
-- Mary Poppendieck
%
九个人不能让一个孩子在一个月内出生。
-- Fred Brooks，《人月神话》作者
%
好代码本身就是最好的文档。当你需要添加一个注释时，你应该考虑如何修改代码才能不需要注释。
-- Steve McConnell，Code Complete 作者
%
一个人在教会电脑之前，别说他真正理解这个东西了。
-- Donald Knuth
%
无论在排练中演示是如何的顺利(高效)，当面对真正的现场观众时，出现错误的可能性跟在场观看的人数成正比。
-- 佚名
%
罗马帝国崩溃的一个主要原因是，没有0，他们没有有效的方法表示他们的C程序成功的终止。
-- Robert Firth
%
C程序员永远不会灭亡。他们只是cast成了void。
-- 佚名
%
如果debugging是一种消灭bug的过程，那编程就一定是把bug放进去的过程。
-- Edsger Dijkstra
%
你要么要软件质量，要么要指针算法；两者不可兼得。
-- Bertrand Meyer
%
有两种方法能写出没有错误的程序；但只有第三种好用。
-- Alan J. Perlis
%
最初的90%的代码用去了最初90%的开发时间。余下的10%的代码用掉另外90%的开发时间。
-- Tom Cargill
%
程序员和上帝打赌要开发出更大更好 -- 傻瓜都会用的软件。
而上帝却总能创造出更大更傻的傻瓜。
所以，上帝总能赢。
-- Anon
%
UNIX很简单。但需要有一定天赋的人才能理解这种简单。
-- Dennis Ritchie
%
有两种软件设计的方式：
一种是使它足够简单以致于明显没有缺陷，
另一种则是使它足够复杂以致于没有明显的缺陷。
-- C.A.R. Hoare
%
软件工程的目标是控制复杂度，而不是增加复杂性。
-- Dr. Pamela Zave
%
软件在能够复用前必须先能用。
-- Ralph Johnson
%
优秀的判断力来自经验，但经验来自于错误的判断。
-- Fred Brooks
%
‘理论’是你知道是这样，但它却不好用。
‘实践’是它很好用，但你不知道是为什么。
程序员将理论和实践结合到一起：既不好用，也不知道是为什么。
-- 佚名
%
当你想在你的代码中找到一个错误时，这很难；
当你认为你的代码是不会有错误时，这就更难了。
-- Steve McConnell 《代码大全》
%
如果建筑工人盖房子的方式跟程序员写程序一样，那第一只飞来的啄木鸟就将毁掉人类文明。
-- Gerald Weinberg
%
项目开发的六个阶段：1. 充满热情 2. 醒悟 3. 痛苦 4. 找出罪魁祸首 5. 惩罚无辜 6. 褒奖闲人
-- 佚名
%
优秀的代码是它自己最好的文档。
当你考虑要添加一个注释时，问问自己，“如何能改进这段代码，以让它不需要注释？”
-- Steve McConnell 《代码大全》
%
我们这个世界的一个问题是，蠢人信誓旦旦，智人满腹狐疑。
-- Bertrand Russell
